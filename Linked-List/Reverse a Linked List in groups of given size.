GFG: https://practice.geeksforgeeks.org/problems/reverse-a-linked-list-in-groups-of-given-size/1

Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list.

#MY_CODE#

class Solution
{
    public static Node reverse(Node node, int k)
    {
        Node prev = null;
        Node nxt = null;
        Node curr = node;
        int count =0 ;
        while(curr!=null && count<k)
        {
            nxt = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nxt;
            count++;
        }
        
        if(curr!=null)
            node.next = reverse(curr,k);
        
        return prev;
    }  
}
==============================================================================================================
Leetcode: https://leetcode.com/problems/reverse-nodes-in-k-group/submissions/

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number 
of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

#MY_CODE#

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int l = 0;
        ListNode len=head ;
        while(len!=null)
        {
            len = len.next;
            l++;
        }
        if(l<k)
        {
            return head;
        }
        ListNode curr = head;
        ListNode prev = null;
        ListNode nex = null;
        int count = 0;
        while(curr!=null && count<k)
        {
            nex = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nex;
            count++;
        }
        if(nex!=null)
        {
            head.next = reverseKGroup(nex,k);
        }
        
        return prev;
    }
}
